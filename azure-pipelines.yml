# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: self
    type: git
    ref: main

pool:
  name: Self-hosted Tosca

stages:
- stage: build
  jobs:
    - job: build_app
      displayName: Build Tricentis Insurance Quoting Application
      steps:
        - script: echo build application...

- stage: deploy
  jobs:
    - job: pre_deploy_app
      displayName: Pre deploying application to Docker container
      steps:
        - script: echo set environment...
    - job: deploy_app
      displayName: Deploy application to Docker container
      steps:
        - script: echo depoly to container...

- stage: test
  jobs:
    - job: prep_test_env
      displayName: Prepare the Test Env.
      steps:
      #Create results folder if doesn't exist
      - task: PowerShell@2
        name: SetResultsFolder
        displayName: "Create results folder"
        inputs:
          targetType: 'inline'
          script: |
            if (!(Test-Path "$(resultaFolder)")) {New-Item "$(resultaFolder)" -ItemType Directory}

    - job: run_tests
      steps:
      #Run Tosca test(s) via AOS API
      - task: PowerShell@2
        name: RunToscaTests
        displayName: Run Tosca test(s)
        inputs:
          targetType: 'filePath'
          filePath: $(System.DefaultWorkingDirectory)\tests\aos-api\tosca_execution_client.ps1
          arguments: >
            -toscaServerUrl "$(toscaServerUrl)"
            -eventsConfigFilePath "tests\testEvents.json"
            -projectName "$(projectName)"
            -creator "$(creator)"
            -resultaFolder "$(resultsFolder)"
            -pollingInterval 20
            -debug "true"
      - task: PublishPipelineArtifact@1
        displayName: Publish Pipeline Artifact
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'pipelineArtifacts'
          publishLocation: 'pipeline'
    - job: publish_results
      displayName: Publish Test Results
      steps:
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*_results.xml'

- stage: staging
  displayName: Deploy App to staging env
  jobs:
    - job: deploy_app_to_staging
      displayName: Deploy application to staging
      steps:
        - script: echo Deploying to staging environment...
